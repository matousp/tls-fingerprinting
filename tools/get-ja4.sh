#!/usr/local/bin/bash

#
# get-ja4.sh <PCAP>  [-a <AppName>] [-v <version>] [-t <type:0 (normal) | M (malware) | A (analytics)>] [-d <output DIR>] [-w <whois file>]
#
# E.g., ./get-ja4.sh heodo.pcap -a Heodo -t M -w whois.txt
#
# Extracts TLS/QUIC data from a PCAP file and creates JA4 a JA4S fingerprints, for IPv4 only.
# Whois file is a list of CSV entries in format <IP address>;<OrgName> generated by get-whois.pl.
#
# (c) 2024, Petr Matousek, Brno University of Technology
# Created as a part of FETA project (2022-2025)
#
# Last update: 31/5/2024
#
# Changes: parameter whois added
#


# 
# Related Perl scripts
#

TLS2JA4="./tls2ja4.pl"
TSHARK="/usr/local/bin/tshark"
APPNAME="Unknown" # default application name
VERSION="0"       # default version
TYPE="0"          # default type: 0 = normal traffic, other values: M = alware, A = advertisements/analytics

#
# Reading input parameters
# 

if [ $# -lt 1 -o $# -gt 11 ]; then
    echo "Usage: $0 <PCAP file> [-a <AppName>] [-v <version>] [-t <type:0 (normal) | M (malware) | A (analytics)>] [-d <output DIR>] [-w <whois file>]"
    exit 1;
fi

if [ ! -r "$1" ]; then
    echo "Cannot read file \"$1\""
    exit 1;
else
    INFILE=$1
#    FILENAME=`basename "$1" | cut -d. -f1`
    FILENAME=`basename "$1" | sed -e "s/.[p]*cap.*//"`  # remove .pcap or .pcapng
fi

shift 1
while getopts ":a:v:t:d:w:" options; do
    case ${options} in
	a)
	    APPNAME=${OPTARG}
	    ;;
	v)
	    VERSION=${OPTARG}
	    ;;
	t)
	    TYPE=${OPTARG}
	    if [[ ! ${TYPE} =~ [a|A|m|M|0] ]]; then 
		echo "Uknown type  '${TYPE}' -- use 0 (normal traffic), M (malware) or A (analytics)"
		exit 1;
	    fi
	    TYPE=${TYPE^}    # convert the flag to upper case
	    ;;
	d)
	    OUTDIR=${OPTARG}
	    if [ ! -d $OUTDIR ]; then
		echo "Cannot access output directory \"$OUTDIR\""
		exit 1;
	    fi
	    ;;
	w)
	    WHOISFILE=${OPTARG}
	    if [ ! -r ${WHOISFILE} ]; then
		echo "Cannot read file \"${WHOISFILE}\""
		exit 1;
	    fi
	    ;;
	\?)
	    echo "Error: Invalid argument -${OPTARG}"
            exit 1;;
    esac		
done
#echo "options: INFILE=$INFILE appname = $APPNAME, version = $VERSION, type = $TYPE, OUTDIR=$OUTDIR"

#
# Processing PCAP file
#

#INFILE="$1"
#OUTDIR="$2"

if [ -z ${OUTDIR} ]; then
    OUTDIR=`dirname "${INFILE}"`
fi
echo "Processing file \"${INFILE}\" ..."
echo "Output will be saved into \"${OUTDIR}/\" directory ..."

#
# extracting TLS data using thark into  a csv file; if the output file exists, processing is skipped
#
OUTFILE=${FILENAME}-extracted.csv

if [ ! -f "${OUTDIR}/${OUTFILE}" ]; then 
    echo "Processing TLS traffic ..."
    echo "SrcIP;DstIP;TCP SrcPort;TCP DstPort;UDP SrcPort; UDP DstPort;Proto;Type;Ver;Ciphersuite;List of extensions;SNI;Supported Groups;EC;ALPN;Signature Algorithms;Supported Versions;Time" > "${OUTDIR}/${OUTFILE}"
    ${TSHARK} -r "${INFILE}" -T fields -E separator=";" -e ip.src -e ip.dst -e tcp.srcport -e tcp.dstport -e udp.srcport -e udp.dstport -e ip.proto -e tls.handshake.type -e tls.handshake.version -e tls.handshake.ciphersuite -e tls.handshake.extension.type -e tls.handshake.extensions_server_name -e tls.handshake.extensions_supported_group -e tls.handshake.extensions_ec_point_format -e tls.handshake.extensions_alpn_str -e tls.handshake.sig_hash_alg -e tls.handshake.extensions.supported_version -e frame.time -R "tls.handshake.type==1 or tls.handshake.type==2" -2 >> "${OUTDIR}/${OUTFILE}" 
    
    if [ $? -ne 0 ]; then
	echo "Error 1: SSL/TLS processing failed."
	exit 1;
    fi
fi
#
# processing TLS extracted data and computing JA4+ fingerprints -- full output with JA4 and JA4s raw
#
TLSJA4=${FILENAME}-ja4-raw.csv

if [ ! -f "${OUTDIR}/${TLSJA4}" ]; then
    echo "Saving JA4 raw fingerprints into ${OUTDIR}/${TLSJA4}"
    if [ -r ${WHOISFILE} ]; then
	${TLS2JA4} -f "${OUTDIR}/${OUTFILE}" -app "${APPNAME}" -ver "${VERSION}" -type "${TYPE}" -whois "${WHOISFILE}" > "${OUTDIR}/${TLSJA4}"
    else
	${TLS2JA4} -f "${OUTDIR}/${OUTFILE}" -app "${APPNAME}" -ver "${VERSION}" -type "${TYPE}" > "${OUTDIR}/${TLSJA4}"
    fi
    
    if [ $? -ne 0 ]; then
	echo "Error 2: TLS JA4 processing failed."
	exit 1;
    fi
fi

#
# processing TLS extracted data and computing JA4+ fingerprints -- short output
#
TLSJA4=${FILENAME}-ja4.csv

if [ ! -f "${OUTDIR}/${TLSJA4}" ]; then
    echo "Saving JA4 fingerprints into ${OUTDIR}/${TLSJA4}"
    if [ -r ${WHOISFILE} ]; then
	${TLS2JA4} -f "${OUTDIR}/${OUTFILE}" -app "${APPNAME}" -ver "${VERSION}" -type "${TYPE}" -short -whois "${WHOISFILE}" > "${OUTDIR}/${TLSJA4}"
    else
	${TLS2JA4} -f "${OUTDIR}/${OUTFILE}" -app "${APPNAME}" -ver "${VERSION}" -type "${TYPE}" -short > "${OUTDIR}/${TLSJA4}"
    fi
    
    if [ $? -ne 0 ]; then
	echo "Error 2: TLS JA4 processing failed."
	exit 1;
    fi
fi
